module.exports = (client, interaction) => {
    const config = require('../config.json');
    const { MessageEmbed, MessageSelectMenu, MessageCollector } = require('discord.js');

    const { Octokit } = require("@octokit/core");

    const octokit = new Octokit({ auth: process.env.github_token });

    if (interaction.customId === "open_ticket") {
        if (client.guilds.cache.get(config.server_id).channels.cache.filter(channel => channel.name === interaction.user.id).first()) {
            const dupe = new MessageEmbed()
                .setAuthor(interaction.user.username, interaction.user.displayAvatarURL())
                .setColor("#FF2200")
                .setTitle("Erreur")
                .setDescription("Vous ne pouvez ouvrir qu'un seul ticket √† la fois.")

            return interaction.reply({ embeds: [dupe], ephemeral: true });
        }

        client.guilds.cache.get(config.server_id).channels.create(interaction.user.id, { parent: config.ticket_category })
            .then(channel => {
                channel.permissionOverwrites.create(interaction.user.id, { VIEW_CHANNEL: true, SEND_MESSAGES: true })
                    .then(() => {
                        channel.permissionOverwrites.create(interaction.guild.id, { VIEW_CHANNEL: false });

                        const opened_ticket = new MessageEmbed()
                            .setAuthor(interaction.user.username, interaction.user.displayAvatarURL())
                            .setColor("#fbab31")
                            .setTitle("Ticket cr√©√©")
                            .setDescription(`Votre ticket a √©t√© cr√©√© : <#${channel.id}> \nVous recevrez d'ici peu un message vous invitant √† le configurer.`)

                        interaction.reply({ embeds: [opened_ticket], ephemeral: true });

                        const select = new MessageSelectMenu()
                            .setCustomId("choose_ticket_reason")
                            .setPlaceholder("Pourquoi souhaitez-vous nous contacter ?")
                            .addOptions({ label: "Aide", value: "need_help", description: "Obtenir de l'aide √† propos de nos services", emoji: "üôã" })
                            .addOptions({ label: "Partenariat", value: "partnership", description: "Nous proposer un partenariat", emoji: "üîó" })
                            .addOptions({ label: "Suggestion", value: "suggest", description: "Soumettre une suggestion √† notre √©quipe", emoji: "üí°" })
                            .addOptions({ label: "Bug", value: "bug", description: "Reporter un bug √† notre √©quipe", emoji: "üêõ" })

                        const info = new MessageEmbed()
                            .setAuthor("Configuration ticket", client.user.displayAvatarURL())
                            .setColor("#fbab31")
                            .setDescription(`Bienvenue dans votre ticket cher ${interaction.user.username} ! \nAvant toute chose, merci de choisir pour quelle vous souhaitez contacter notre √©quipe !`)

                        channel.send({
                            content: `<@${interaction.user.id}>`,
                            embeds: [info],
                            components: [
                                {
                                    type: 1,
                                    components: [
                                        select.toJSON()
                                    ]
                                }
                            ]
                        })
                    });
            });
    } else if (interaction.customId === "choose_ticket_reason") {
        switch (interaction.values[0]) {
            case "need_help":
                const help_ticket = new MessageEmbed()
                    .setAuthor(interaction.user.username, interaction.user.displayAvatarURL())
                    .setColor("#fbab31")
                    .setTitle("Ticket cat√©goris√©")
                    .setDescription("Votre ticket a bien √©t√© cat√©goris√© comme une demande d'aide ! \nUne r√©ponse vous sera apport√©e d√®s que possible !")
                    .addField("Bonnes habitudes :", "Pour obtenir une r√©ponse √† votre question plus rapidement, n'oubliez d'indiquer dans ce salon un maximum de d√©tail qui pourra aider notre √©quipe √† vous aider.")

                interaction.reply({ embeds: [help_ticket] });
                break;

            case "partnership":
                const partner_ticket = new MessageEmbed()
                    .setAuthor(interaction.user.username, interaction.user.displayAvatarURL())
                    .setColor("#fbab31")
                    .setTitle("Ticket cat√©goris√©")
                    .setDescription("Votre ticket a bien √©t√© cat√©goris√© comme une demande de partenariat ! \nUne r√©ponse vous sera apport√©e d√®s que possible !")
                    .addField("Bonnes habitudes :", "Pour obtenir une r√©ponse √† votre proposition plus rapidement, n'oubliez d'indiquer dans ce salon un maximum de d√©tail qui pourra aider notre √©quipe √† vous donner son verdict.")

                interaction.reply({ embeds: [partner_ticket] });
                break;

            case "suggest":
                const sug_embed = new MessageEmbed()
                    .setAuthor(interaction.user.username, interaction.user.displayAvatarURL())
                    .setColor("#fbab31")
                    .setTitle("Une derni√®re question")
                    .setDescription("Lequel de nos services est concern√© par votre suggestion ?")

                const select_sug = new MessageSelectMenu()
                    .setCustomId("choose_sug_target")
                    .setPlaceholder("Quel service est concern√© par votre suggestion ?")
                    .addOptions({ label: "Bot Discord", value: "discord_bot", description: "Le bot Parhelion Bot sur notre serveur Discord", emoji: "ü§ñ" })
                    .addOptions({ label: "Bot Twitch", value: "twitch_bot", description: "Le bot Parhelion Bot sur notre cha√Æne Twitch", emoji: "ü§ñ" })

                interaction.reply({
                    embeds: [sug_embed],
                    components: [
                        {
                            type: 1,
                            components: [
                                select_sug.toJSON()
                            ]
                        }
                    ]
                });
                break;

            case "bug":
                const bug_embed = new MessageEmbed()
                    .setAuthor(interaction.user.username, interaction.user.displayAvatarURL())
                    .setColor("#fbab31")
                    .setTitle("Une derni√®re question")
                    .setDescription("Lequel de nos services est concern√© par votre bug ?")

                const select_bug = new MessageSelectMenu()
                    .setCustomId("choose_bug_target")
                    .setPlaceholder("Quel service est concern√© par votre bug ?")
                    .addOptions({ label: "Bot Discord", value: "discord_bot", description: "Le bot Parhelion Bot sur notre serveur Discord", emoji: "ü§ñ" })
                    .addOptions({ label: "Bot Twitch", value: "twitch_bot", description: "Le bot Parhelion Bot sur notre cha√Æne Twitch", emoji: "ü§ñ" })

                interaction.reply({
                    embeds: [bug_embed],
                    components: [
                        {
                            type: 1,
                            components: [
                                select_bug.toJSON()
                            ]
                        }
                    ]
                });
                break;
        }
    } else if (interaction.customId === "choose_bug_target") {
        var repo;

        switch (interaction.values[0]) {
            case "twitch_bot":
                repo = "Twitch-Bot";
                break;

            case "discord_bot":
                repo = "Discord-Bot"
                break;
        }

        const bug_embed = new MessageEmbed()
            .setAuthor(interaction.user.username, interaction.user.displayAvatarURL())
            .setColor("#fbab31")
            .setTitle("Je vous √©coute !")
            .setDescription("Quel est le bug que vous souhaitez nous reporter ?")
            .addField("Quelles informations indiquer ?", "Nous vous demandons d'indiquer les √©tapes de reproduction du bug, quel est le r√©sultat attendu ainsi que le r√©sultat actuel.")
            .addField("Attention !", "Le bug sera automatiquement soumis √† notre √©quipe apr√®s votre premier message sur ce salon. Merci donc d'inclure toutes les informations ci-dessus dans un seul message.")

        interaction.reply({ embeds: [bug_embed] })
            .then(() => {
                const collector = new MessageCollector(interaction.message.channel, { max: 1 });

                collector.on("collect", bug => {
                    octokit.request(`POST /repos/Parhelion-Minecraft/${repo}/issues`, {
                        owner: 'Parhelion-Minecraft',
                        repo: repo,
                        title: 'Bug',
                        body: `# Bug\n${bug.content}\n# Reported by\n**Tag** : \`${interaction.user.username}#${interaction.user.discriminator}\`\n**ID** : \`${interaction.user.id}\``
                    }).then(res => {
                        const bug_posted = new MessageEmbed()
                            .setAuthor(interaction.user.username, interaction.user.displayAvatarURL())
                            .setColor("#fbab31")
                            .setTitle("Merci !")
                            .setDescription(`Votre bug nous a bien √©t√© report√© ! \nVous pouvez l'avanc√©e de son traitement [ici](https://github.com/Parhelion-Minecraft/${repo}/issues/${res.data.number}) ! \n\nVotre ticket sera ferm√© automatiquement dans 10 secondes.`)

                        bug.channel.send({ embeds: [bug_posted] });

                        setTimeout(() => {
                            bug.channel.delete();

                            client.users.cache.get(bug.channel.name).send({
                                embeds: [
                                    {
                                        color: "#fbab31",
                                        description: "Votre ticket de support a √©t√© ferm√©."
                                    }
                                ]
                            });
                        }, 10000);
                    });
                });
            });
    } else if (interaction.customId === "choose_sug_target") {
        var repo;

        switch (interaction.values[0]) {
            case "twitch_bot":
                repo = "Twitch-Bot";
                break;

            case "discord_bot":
                repo = "Discord-Bot"
                break;
        }

        const sug_embed = new MessageEmbed()
            .setAuthor(interaction.user.username, interaction.user.displayAvatarURL())
            .setColor("#fbab31")
            .setTitle("Je vous √©coute !")
            .setDescription("Quel est la suggestion que vous souhaitez nous soumettre ?")
            .addField("Attention !", "La suggestion sera automatiquement soumise √† notre √©quipe apr√®s votre premier message sur ce salon. Merci donc d'inclure toutes les informations souhait√©es dans un seul message.")

        interaction.reply({ embeds: [sug_embed] })
            .then(() => {
                const collector = new MessageCollector(interaction.message.channel, { max: 1 });

                collector.on("collect", sug => {
                    octokit.request(`POST /repos/Parhelion-Minecraft/${repo}/issues`, {
                        owner: 'Parhelion-Minecraft',
                        repo: repo,
                        title: 'Suggestion',
                        body: `# Suggestion\n${sug.content}\n# Reported by\n**Tag** : \`${interaction.user.username}#${interaction.user.discriminator}\`\n**ID** : \`${interaction.user.id}\``
                    }).then(res => {
                        const sug_posted = new MessageEmbed()
                            .setAuthor(interaction.user.username, interaction.user.displayAvatarURL())
                            .setColor("#fbab31")
                            .setTitle("Merci !")
                            .setDescription(`Votre suggestion nous a bien √©t√© soumise ! \nVous pouvez l'avanc√©e de son traitement [ici](https://github.com/Parhelion-Minecraft/${repo}/issues/${res.data.number}) ! \n\nVotre ticket sera ferm√© automatiquement dans 10 secondes.`)

                        sug.channel.send({ embeds: [sug_posted] });

                        setTimeout(() => {
                            sug.channel.delete();

                            client.users.cache.get(sug.channel.name).send({
                                embeds: [
                                    {
                                        color: "#fbab31",
                                        description: "Votre ticket de support a √©t√© ferm√©."
                                    }
                                ]
                            });
                        }, 10000);
                    });
                });
            });
    }
}